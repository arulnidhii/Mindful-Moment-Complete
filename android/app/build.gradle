// ---------- top-level plugins ----------
apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

// ---------- React / Expo config ----------
react {
  entryFile  = file(["node","-e","require('expo/scripts/resolveAppEntry')",
                     projectRoot,"android","absolute"]
                    .execute(null,rootDir).text.trim())

  // let the RN Gradle plugin pick Hermes; do NOT override
  // hermesCommand removed -> avoids the “extension 'react' property 'reactNativeDir'” crash :contentReference[oaicite:1]{index=1}

    reactNativeDir = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()
    hermesCommand = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsolutePath() + "/sdks/hermesc/%OS-BIN%/hermesc"
    codegenDir = new File(["node", "--print", "require.resolve('@react-native/codegen/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()
    cliFile = new File(["node", "--print", "require.resolve('@expo/cli', { paths: [require.resolve('expo/package.json')] })"].execute(null, rootDir).text.trim())
    bundleCommand = "export:embed"
    autolinkLibrariesWithApp()
}

// ---------- misc switches ----------
def enableProguardInReleaseBuilds =
      (findProperty('android.enableProguardInReleaseBuilds') ?: false).toBoolean()
def jscFlavor = 'io.github.react-native-community:jsc-android:2026004.+'

// ---------- Android block ----------
android {
  ndkVersion        rootProject.ext.ndkVersion
  compileSdk        rootProject.ext.compileSdkVersion   // buildToolsVersion line removed per AGP 8.8 advice :contentReference[oaicite:2]{index=2}

  namespace 'com.arulsdk.mindfulmoment7y4ko4c'

  defaultConfig {
    applicationId   'com.arulsdk.mindfulmoment7y4ko4c'
    minSdkVersion   rootProject.ext.minSdkVersion
    targetSdkVersion rootProject.ext.targetSdkVersion
    versionCode 11
    versionName "1.4.1"
  }

  signingConfigs {
    debug {
      storeFile file('debug.keystore')
      storePassword 'android'
      keyAlias 'androiddebugkey'
      keyPassword 'android'
    }
  }

  buildTypes {
    debug   { signingConfig signingConfigs.debug }
    release {
      signingConfig   signingConfigs.debug      // TODO: replace with prod keystore
      shrinkResources (findProperty('android.enableShrinkResourcesInReleaseBuilds')?.toBoolean() ?: false)
      minifyEnabled   enableProguardInReleaseBuilds
      proguardFiles   getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
      crunchPngs      (findProperty('android.enablePngCrunchInReleaseBuilds')?.toBoolean() ?: true)
      if (enableProguardInReleaseBuilds) {
        proguardFile 'mapping.txt'
      }
    }
  }

  packagingOptions {
    jniLibs {
      useLegacyPackaging (findProperty('expo.useLegacyPackaging')?.toBoolean() ?: false)
    }
  }

  androidResources {
    ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:!CVS:!thumbs.db:!picasa.ini:!*~'
  }




}

// ---------- dependencies ----------
dependencies {
  implementation("com.facebook.react:react-android")   // version-locked by RN plugin

  def isGifEnabled          = (findProperty('expo.gif.enabled')  ?: "") == "true"
  def isWebpEnabled         = (findProperty('expo.webp.enabled') ?: "") == "true"
  def isWebpAnimatedEnabled = (findProperty('expo.webp.animated') ?: "") == "true"

  if (isGifEnabled) {
    implementation("com.facebook.fresco:animated-gif:${expoLibs.versions.fresco.get()}")
  }
  if (isWebpEnabled) {
    implementation("com.facebook.fresco:webpsupport:${expoLibs.versions.fresco.get()}")
    if (isWebpAnimatedEnabled) {
      implementation("com.facebook.fresco:animated-webp:${expoLibs.versions.fresco.get()}")
    }
  }

  if (hermesEnabled.toBoolean()) {
    implementation("com.facebook.react:hermes-android")
  } else {
    implementation jscFlavor
  }
}
